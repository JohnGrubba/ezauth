{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"High performance self-hosted and fully customizable authentication service"},{"location":"#disclaimer","title":"Disclaimer","text":"<ul> <li>\u26a0\ufe0f The project is under very active development.</li> <li>\u26a0\ufe0f Expect bugs and breaking changes.</li> <li>\u26a0\ufe0f Make sure to always have a backup of your user data.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>High performance: Written in Python with the help of FastAPI.</li> <li>Customizable: You can customize the service to your needs.</li> <li>Self-hosted: You have full control over your user data.</li> <li>Secure: The service is designed with security in mind.</li> <li>Easy to use: The service is easy to set up and use.</li> </ul>"},{"location":"#customizability","title":"Customizability","text":"<ul> <li>Email Templates: You can customize all emails sent by the service.</li> <li>User Data: You can add custom fields to the user object which can be accessed in the email templates. This is possible by using <code>MongoDB</code> as the database.</li> <li>Database Configuration: You can configure the database connection to your needs.</li> <li>And much more..</li> </ul>"},{"location":"information/","title":"Information about EZAuth","text":"<p>EZAuth is a simple and easy-to-use authentication service for your applications. It is built on top of FastAPI and MongoDB. It also uses Redis for temporary storage.</p>"},{"location":"information/#security","title":"Security","text":"<p>To guarantee the security of your user data, EZAuth uses the following security measures:</p> <ul> <li>Password Hashing: All passwords are hashed using the <code>bcrypt</code> algorithm.</li> <li>Session Management: Sessions can be configured to expire after a certain amount of time. Users can also delete sessions manually if they forgot to log out elsewhere.</li> <li>E-Mail Verification: Users can verify their email address before using the service.</li> <li>2FA: Two-factor authentication can be enabled for users.</li> <li>OAuth2: OAuth2 can be enabled for users.</li> <li>Rate Limiting: Rate limiting can be enabled to prevent brute force attacks.</li> <li>Password Reset: Users can reset their password via E-Mail.</li> </ul>"},{"location":"information/#documentation","title":"Documentation","text":"<p>You are reading the informative documentation for EZAuth.  If you need a documentation of all the endpoints, you can start the service and navigate to the <code>/docs</code> endpoint to find the API Documentation. Because we utilize FastAPI, the documentation is done automatically and displayed via Swagger UI. This also makes the API OpenAPI compliant.</p> <p>API Documentation</p> <p>Navigate to <code>http://localhost:3250/docs</code> to see the API Documentation.</p>"},{"location":"information/#code-examples","title":"Code Examples","text":"<p>Official Libraries</p> <p>We are working on official Libraries for different languages. Until then, you can use the REST API to interact with the service. Every help is appreciated.</p> <p>You can use EZAuth in any Application and or Language that supports HTTP. Here are some examples in different languages:</p>"},{"location":"information/#python","title":"Python","text":"<pre><code>import requests\n\nurl = \"http://localhost:3250/signup/\"\n\npayload = {\n    \"email\": \"testemail123@email.com\",\n    \"username\": \"Hans\",\n    \"password\": \"Kennwort1!\",\n}\n\nrequests.post(url, json=payload)\n</code></pre>"},{"location":"information/#javascript","title":"JavaScript","text":"<pre><code>fetch(\"http://localhost:3250/signup/\", {\n    method: 'POST',\n    headers: {\n        \"Content-Type\", \"application/json\"\n    },\n    body: JSON.stringify({\n        \"email\": \"testemail123@email.com\",\n        \"username\": \"Hans\",\n        \"password\": \"Kennwort1!\"\n    })\n})\n</code></pre>"},{"location":"information/#curl","title":"cURL","text":"<pre><code>curl -X 'POST'\n'http://localhost:3250/signup/'\n-H 'Content-Type: application/json'\n-d '{\n    \"email\": \"testemail123@email.com\",\n    \"username\": \"Hans\",\n    \"password\": \"Kennwort1!\"\n}'\n</code></pre>"},{"location":"internal/","title":"Internal API","text":"<p>EZAuth provides an internal API for other services to interact with the service. This API is not meant to be exposed to the public and should only be used by services that are running on the same network as the EZAuth service. The Idea is to provide only the User ID to other services, which can then be stored in their own database to reference the user. And once the data is needed, the service can use the internal API to get the user data. This way the user data is not exposed to the public and always kept secure by EZAuth :)</p> <p>Internal API Key</p> <p>Even though it is recommended to hide the <code>/internal</code> endpoints from the public with a middleware, you should still keep the <code>internal-api-key</code> secret. If someone gets access to this key, they can access all the internal API endpoints.</p>"},{"location":"internal/#access-the-internal-api","title":"Access the Internal API","text":"<p>To access any endpoints prefixed with <code>/internal</code> you need to set the <code>internal-api-key</code> header.</p> <p>Example in Python:</p> <pre><code>import requests\n\nurl = \"http://localhost:3250/internal/&lt;whatever_endpoint&gt;\"\nheaders = {\n    \"internal-api-key\": \"YOUR_INTERNAL_API_KEY\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n</code></pre> <p>Any request to an internal endpoint without the <code>internal-api-key</code> header will result in a <code>401 Unauthorized</code> response.</p> <p>E-Mail Information</p> <p>For more information on how to send E-Mails using the internal API, see the E-Mail Configuration section.</p>"},{"location":"advanced/email_templates/","title":"Advanced E-Mail Templating","text":"<p>If the provided placeholders are not enough, and you need more logic behind your Templating, you can use our <code>preprocessing</code> feature. This feature allows you to run a custom function on the E-Mail Template before it is sent out. This function will be able to add / modify / remove placeholders from the template. You can also use this function to add custom logic to the template. Examples of what you can do with this feature:</p> <p>Usage Examples of Preprocessing E-Mail Templates</p> <ul> <li>Adding a Formatted Date to the E-Mail Template</li> <li>Utilizing an external Service to generate a QR Code</li> <li>Adding a Random Quote to the E-Mail Template</li> <li>Sending a Request to an external API</li> </ul>"},{"location":"advanced/email_templates/#example","title":"Example","text":"<p>In this example, we will add a <code>timestamp</code> placeholder to the E-Mail Template. This placeholder will contain the current date and time when the E-Mail is sent out.</p> <p>Preprocessing Function</p> <ul> <li>The function should be defined in a Python file in the <code>config/email</code> folder. The function should be named <code>preprocess</code> and should accept a single parameter <code>kwargs</code> which is a dictionary containing all the placeholders available in the E-Mail Template.</li> <li>The function should return the modified <code>kwargs</code> object.</li> <li>The Filename should be the same as the E-Mail Template filename with the <code>.py</code> extension. (e.g. <code>WelcomeMail.py</code> for the <code>WelcomeMail.html</code> template)</li> </ul> <p>In this example, we will add a <code>timestamp</code> placeholder to the <code>ConfirmEmail.html</code> template. config/email/ConfirmEmail.py<pre><code>from datetime import datetime\n\ndef preprocess(kwargs: dict) -&gt; dict:\n    kwargs[\"timestamp\"] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return kwargs\n</code></pre></p>"},{"location":"advanced/extensions/","title":"Extensions","text":"<p>Since the Goal of EZAuth is to be as extensive as possible, it is possible to create your own extensions to add functionality to EZAuth.</p>"},{"location":"advanced/extensions/#preparation","title":"Preparation","text":"<p>To allow Extensions, you need to create a new folder called <code>extensions/</code> in the directory specified in the docker-compose file (default <code>./</code> root of Repository), if it doesn't already exist. This folder is not tracked by git, so you can safely add your own extensions without the risk of losing them when updating the repository.</p> <pre><code>mkdir -p extensions\n</code></pre> <p>EZAuth Developer Mode</p> <p>To also enjoy a greater developement experience, you can start EZAuth in Development Mode. This will allow you to see changes in your extensions without restarting the server. It will also show you more detailed error messages, which can be helpful when developing extensions.</p>"},{"location":"advanced/extensions/#creating-an-extension","title":"Creating an Extension","text":"<p>Extensions can break EVERYTHING (including all your userdata)</p> <p>Since Extensions are a really advanced feature, they are not recommended to be developed by beginners. However, if you are an experienced developer, you can create your own extensions.</p> <ol> <li> <p>New Folder for the Extension</p> <p>Inside the <code>extensions/</code> directory, create a new folder for your extension. The name of the folder should be the name of your extension. We force a folder, to make it easier for you to structure your extension and keep an overview of all the installed extensions. We use the name <code>my_extension</code> for this example.</p> <pre><code>mkdir extensions/my_extension\n</code></pre> </li> <li> <p>Make the Extension Loadable</p> <p>To make EZAuth recognize your extension as a valid one, add a <code>__init__.py</code> file to your newly created extension folder. This file must be there and export a <code>router</code> which is a FastAPI Router.</p> <p>Depending on the structure of your Extension, you can either write the whole extension into the <code>__init__.py</code> file or import only the router from another file.</p> <p>Imports in Extension Files</p> <p>Be careful when doing imports in extensions, as by just importing other files using <code>.myextension</code> won't work (importlib can't find the module). You have to use the full import path to the file starting with <code>extensions.my_extension.</code> -&gt; E.g. <code>extensions.my_extension.myextension</code></p> extensions/my_extension/myextension.py<pre><code>from fastapi import APIRouter\n\nrouter = APIRouter(\n    prefix=\"/test\",\n    tags=[\"Test Extension\"]\n)\n\n@router.get(\"\")\nasync def test():\n    \"\"\"\n    # Test Endpoint\n    \"\"\"\n    pass\n</code></pre> extensions/my_extension/__init__.py<pre><code>from extensions.my_extension.myextension import router\n</code></pre> </li> <li> <p>Provide some information about the Extension</p> <p>To make it easier for users to understand what your extension does, you can provide a <code>README.md</code> file in your extension folder. This file can contain information about the extension, how to use it, and what it does.</p> extensions/my_extension/README.md<pre><code># My Extension\n\nThis is a test extension for EZAuth.\n</code></pre> <p>This is especially useful if you want to share your extension with others.</p> </li> </ol>"},{"location":"advanced/extensions/#downloading-extensions","title":"Downloading Extensions","text":"<p>If you want to use an extension that someone else has created, you can download it from a repository and place it in the <code>extensions/</code> directory. The extension should be structured as described above.</p> <p>Extension Repository</p> <p>If you want to share your extension with others, you can create a repository on GitHub or any other platform and share the link with others. This way, others can easily download your extension and use it in their EZAuth instance. If you want to share your extension with the community, you can also create a Pull Request to add your extension to the official EZAuth Extension Repository.</p>"},{"location":"advanced/further_custom/","title":"Further Customization","text":"<p>If you want to further customize the service you can take a look at the <code>docker-compose.yml</code> file in the root directory of the repository. This file contains all the configuration options for the service. You can change the port on which the service is running, the volume mounts, and the environment variables.</p>"},{"location":"advanced/further_custom/#api-configuration","title":"API Configuration","text":"<p>The Prefix for all Parameters here is <code>services.api</code>. The Following Environment Variables can be set in the <code>docker-compose.yml</code> file to configure the API:</p> Parameter Description <code>ports</code> Datatype: String  Default: <code>\"3250:80\"</code>  Only change the left (host) side of the ports. The API will always run on Port 80 internally, and can be forwarded to any port on the host system. In this example <code>3250</code>. <code>volumes</code> Datatype: String  Default: <code>\"./config:/app/config\"</code>  The volume mount for the configuration file. Only change the left (host) side of the configuration folder directory. In this example <code>./config</code>. You can also change the <code>./uploads</code> directory, for user file uploads like profile pictures etc."},{"location":"advanced/further_custom/#database-configuration","title":"Database Configuration","text":"<p>The Prefix for all Parameters here is <code>services.db.environment</code>. When changing the database configuration, make sure to also change the <code>api</code> section in the <code>docker-compose.yml</code> file to reflect the new database connection. The following environment variables can be set in the <code>docker-compose.yml</code> file to configure the database connection:</p> Parameter Description <code>MONGO_INITDB_ROOT_USERNAME</code> Datatype: String  Default: <code>\"admin\"</code>  The Root Username for the Database. <code>MONGO_INITDB_ROOT_PASSWORD</code> Datatype: String  Default: <code>\"admin\"</code>  The Root Password for the Database. <code>MONGO_INITDB_DATABASE</code> Datatype: String  Default: <code>\"ezauth\"</code>  The Database Name. <p>You can also change the location of the database data by changing the <code>volumes</code> section of the <code>db</code> section in the <code>docker-compose.yml</code> file.</p>"},{"location":"advanced/further_custom/#redis-configuration","title":"Redis Configuration","text":"<p>The Prefix for all Parameters here is <code>services.redis</code>. When changing the Redis configuration, make sure to also change the <code>api</code> section in the <code>docker-compose.yml</code> file to reflect the new Redis connection.</p> Parameter Description <code>command</code> Datatype: String  Default: <code>redis-server --requirepass admin</code>  You can change the password for the redis server here. It has to be set in the environment of the API section too."},{"location":"advanced/oauth/","title":"OAuth","text":"<p>EZAuth offers a way to authenticate users via OAuth. This is a more secure way to authenticate users and also simplifies the registration process for users. The following Rules are applied when using OAuth:</p> <ul> <li> <p>A new user is created when the user logs in for the first time with oauth (Username and E-Mail get derived from the OAuth Provider)</p> </li> <li> <p>The user can log in with the same OAuth Provider again and again</p> </li> <li> <p>The user can reset his password after logging in with OAuth and is the able to log in without OAuth</p> </li> <li> <p>If there is a user with the same E-Mail as the OAuth Provider, the OAuth will be linked to the existing user</p> </li> <li> <p>OAuth is a full replacement for the normal login process</p> </li> </ul>"},{"location":"advanced/oauth/#google-oauth","title":"Google OAuth","text":""},{"location":"advanced/oauth/#setup-google-oauth","title":"Setup Google OAuth","text":"<ol> <li>Go to the Google Cloud Console.</li> <li>Create a new project.</li> <li>Go to the APIs &amp; Services -&gt; Credentials section.</li> <li>Click on <code>Create credentials</code> and select <code>OAuth client ID</code>.</li> <li>Select <code>Web application</code> as the application type.</li> <li>Add the following URIs to the <code>Authorized redirect URIs</code> (Where <code>{BASE_URL}</code> is the Hostname of the server eg. <code>http://test.com</code>):<ul> <li><code>{BASE_URL}/oauth/google/callback</code></li> </ul> </li> <li> <p>Add the following scopes </p> </li> <li> <p>Click on <code>Create</code> and download the credentials as JSON and place them in the <code>config</code> folder. Make sure the name of the file is <code>google_client_secret.env.json</code>.</p> </li> </ol>"},{"location":"advanced/oauth/#github-oauth","title":"GitHub OAuth","text":""},{"location":"advanced/oauth/#setup-github-oauth","title":"Setup GitHub OAuth","text":"<ol> <li>Go to the GitHub Developer Settings</li> <li>Click on <code>New OAuth App</code>.</li> <li>Add the following URIs to the <code>Authorization callback URL</code> (Where <code>{BASE_URL}</code> is the Hostname of the server eg. <code>http://localhost:3250</code>):<ul> <li><code>{BASE_URL}/oauth/github/callback</code></li> </ul> </li> <li>Create the Application and copy the <code>Client ID</code> and <code>Client Secret</code> and create the following file in the <code>config</code> folder.</li> </ol> github_client_secret.env.json<pre><code>{\n    \"client_id\": \"YOUR_CLIENT\",\n    \"client_secret\": \"YOUR_SECRET\"\n}\n</code></pre>"},{"location":"advanced/ssl/","title":"SSL / HTTPS","text":"<p>If you want to deploy EZAuth you may want to run it via <code>HTTPS</code> instead of <code>HTTP</code>. This can be easily achieved with EZAuth, by putting certificates in the <code>config/ssl</code> directory. The certificates have to be named <code>cert.pem</code> and <code>key.pem</code>. The <code>cert.pem</code> file should contain the certificate and the intermediate certificate, while the <code>key.pem</code> file should contain the private key.</p> <p>EZAuth will automatically detect the certificates and run on <code>HTTPS</code> instead of <code>HTTP</code>. If you want to run EZAuth on <code>HTTP</code> again, just remove the certificates from the <code>config/ssl</code> directory.</p>"},{"location":"advanced/ssl/#self-signing-with-mkcert","title":"Self Signing with MKCert","text":"<p>If you want to test EZAuth with self-signed certificates, you can use MKCert.</p> <p>SSL Certificates</p> <p>Make sure that the certificates are valid and not self-signed. Browsers will not accept self-signed certificates and will show a warning to the user. Use Let's Encrypt or a similar service to get valid certificates.</p> <p>To generate a self-signed certificate with MKCert, install MKCert and follow the instructions below.</p> Debian/UbuntuWindows <p>Run the following commands to generate a Certificate with MKCert</p> <pre><code>cd config\nmkdir -p ssl\ncd ssl\nmkcert yourdomain.com localhost 127.0.0.1\n</code></pre> <p>Create a new folder in the <code>config</code> directory called <code>ssl</code>. Open a command prompt and navigate to the <code>config/ssl</code> directory. Run the following command to generate a Certificate with MKCert</p> <pre><code>mkcert yourdomain.com localhost 127.0.0.1\n</code></pre> <p>After running the command, you will see two files in the <code>config/ssl</code> directory: <code>yourdomain.com.pem</code> and <code>yourdomain.com-key.pem</code>. Rename the files to <code>cert.pem</code> and <code>key.pem</code> respectively. Then restart the EZAuth service to apply the changes.</p>"},{"location":"configuration/configuration/","title":"Configuration","text":"<p>To configure EZAuth you can take a look at the <code>configtemplate.json</code> file in the <code>config</code> directory. This file contains all the configuration options for EZAuth.</p>"},{"location":"configuration/configuration/#parameters-table","title":"Parameters table","text":"<p>All configuration parameters are listed in the tables below. Make sure that all parameters are set correctly before starting the service.</p> <p>Apply Configuration</p> <p>If you change the configuration file, make sure to restart the service to apply the changes.</p>"},{"location":"configuration/configuration/#signup-configuration","title":"Signup Configuration","text":"Parameter Description <code>signup.enable_conf_email</code> Datatype: Boolean  Default: <code>false</code>  Enable or disable the confirmation E-Mail for new users. <code>signup.conf_code_expiry</code> Datatype: Integer  Default: <code>5</code>  The time in minutes until the confirmation code expires. <code>signup.conf_code_complexity</code> Datatype: Integer  Default: <code>1</code>  The complexity of the confirmation code.  Possible Values <ul><li>1: <code>4 Digit Numeric</code></li><li>2: <code>6 Digit Numeric</code></li><li>3: <code>4 Characters</code></li><li>4: <code>6 Characters</code></li></ul> <code>signup.enable_welcome_email</code> Datatype: Boolean  Default: <code>false</code>  Enable or disable the welcome E-Mail for new users. <code>signup.oauth.providers_enabled</code> Datatype: List  Default: <code>[]</code>  Enabled OAuth Providers.   Possible Providers<ul><li>Google</li><li>GitHub</li></ul> <code>signup.oauth.base_url</code> Datatype: String  Default: <code>\"http://localhost:3250/\"</code>  The Base URL for the callback URL from OAuth Providers. When you host the service somewhere, you may want to change this to the official Domain instead of an IP. This is also the value you set when setting up your OAuth Providers. Make sure those values match. (Mostly the URL of this instance unless you are overriding the callback function) <code>signup.oauth.redirect_url</code> Datatype: String  Default: <code>\"\"</code>  Redirect URL after the callback has been called and account was created or logged in. Only makes sense when using EZAuth Client Side or on the same domain. (Cookie may be set only for the EZAuth Domain if different than your frontend) <code>signup.password_complexity</code> Datatype: Integer  Default: <code>4</code>  Password Complexity Requirement. Every higher value, includes all the previous ones too. <ul><li>0: No Restrictions</li><li>1: Minimum 8 Characters</li><li>2: Min. One Digit</li><li>3: Min. One Capital Letter</li><li>4: Min. One Special Character</li></ul> <code>signup.password_regex</code> Datatype: String  Default: <code>\\\\s</code>  Additional Regex for Password validation. Default doesn't allow whitespaces in password. Should be used when <code>signup.password_complexity</code> is set to 0. <code>signup.username_complexity</code> Datatype: Integer  Default: <code>2</code>  Username Complexity Requirement. Every higher value, includes all the previous ones too. <ul><li>0: No Restrictions</li><li>1: Minimum 4 Characters</li><li>2: Max. 20 Characters</li></ul> <code>signup.username_regex</code> Datatype: String  Default: <code>[^a-zA-Z0-9]</code>  Additional Regex for Username validation. Default value restricts special characters. Should be used when <code>signup.username_complexity</code> is set to 0. <code>signup.username_blocklist</code> Datatype: List of Strings  Default: <code>[\"you\", \"admin\", \"server\", \"ai\"]</code>  List of usernames, that can not be used by anyone. Checks are performed by using lower case to compare with this list, so make sure you only input lower case usernames here."},{"location":"configuration/configuration/#e-mail-configuration","title":"E-Mail Configuration","text":"<p>SMTP SSL required</p> <p>EZAuth uses SMTP_SSL to send E-Mails. Make sure that your SMTP server supports SSL. Currently EZAuth does not support STARTTLS.</p> Parameter Description <code>email.login_usr</code> Datatype: String  Default: <code>\"\"</code>  E-Mail Login Identifier (mostly the E-Mail itself).  Example: test@test.com <code>email.login_pwd</code> Datatype: String  Default: <code>\"\"</code>  E-Mail Login Password. <code>email.sender_email</code> Datatype: String  Default: <code>\"\"</code>  E-Mail address from which the E-Mails are sent. Can be changed to something like <code>EZAuth &lt;ezauth.noreply@gmail.com</code> to achieve a nicer looking E-Mail. <code>email.smtp_host</code> Datatype: String  Default: <code>\"\"</code>  SMTP Host for the E-Mail server.  Example: <code>smtp.gmail.com</code> <code>email.smtp_port</code> Datatype: Integer  Default: <code>465</code>  SMTP Port for the E-Mail server."},{"location":"configuration/configuration/#session-configuration","title":"Session Configuration","text":"Parameter Description <code>session.session_expiry_seconds</code> Datatype: Integer  Default: <code>86400</code>  The time in seconds until a login session expires. Expires on Client (Browser) and on the Server (Database). <code>session.session_refresh_seconds</code> Datatype: Integer  Default: <code>43200</code>  The session get's automatically extended if user performs any authentication requiring action within session_refresh_seconds (43200) before expiry. Be careful with this parameter, because setting it too close to session_expiry_seconds, may cause unwanted server and database load due to more frequent session expiry update actions. <code>session.max_session_count</code> Datatype: Integer  Default: <code>5</code>  Maximum amount of sessions for one User. <code>session.auto_cookie</code> Datatype: Boolean  Default: <code>true</code>  Specifies if the API should automatically return a <code>Set-Cookie</code> header to potentially automatically set the Session Token for the client. May simplify upcoming requests to this API. <code>session.auto_cookie_name</code> Datatype: String  Default: <code>\"session\"</code>  The name of the cookie which will be set by the API. <code>session.cookie_samesite</code> Datatype: String  Default: <code>none</code>  Same Site Cookie Mode.  <ul><li>none</li><li>strict</li><li>lax</li></ul> <code>session.cookie_secure</code> Datatype: Boolean  Default: <code>true</code>  Secure Cookie Mode."},{"location":"configuration/configuration/#internal-api-configuration","title":"Internal API Configuration","text":"<p>Internal API Key</p> <p>Change this immediately after cloning the repository. Keeping the default value is a severe security risk.</p> Parameter Description <code>internal.internal_api_key</code> Datatype: String  Default: <code>\"CHANGE_ME_NOW\"</code>  This is sensitive information and must never be exposed anywhere. <code>internal.internal_columns</code> Datatype: List  Default: <code>[\"_id\"]</code>  Columns that should only be revealed via the internal API. This example will never reveal <code>_id</code> to public endpoints, but just to the <code>/internal</code> endpoints as well as E-Mails. <code>internal.not_updateable_columns</code> Datatype: List  Default: <code>[\"email\"]</code>  Columns that should not be able to get updated via the public API."},{"location":"configuration/configuration/#account-features-configuration","title":"Account Features Configuration","text":"Parameter Description <code>account_features.enable_reset_pswd</code> Datatype: Boolean  Default: <code>true</code>  Enable or disable the password reset feature. <code>account_features.reset_pswd_conf_mail</code> Datatype: Boolean  Default: <code>true</code>  Enable or disable the password change confirmation E-Mail. <code>account_features.2fa.enable</code> Datatype: Boolean  Default: <code>false</code>  Enable or disable two factor for Login. 2FA was tested with Google Authenticator and 2FAS Auth <code>account_features.2fa.issuer_name</code> Datatype: String  Default: <code>\"EZAuth\"</code>  How the two factor code will be titled in the users 2FA App. (Mostly the App Name) <code>account_features.2fa.issuer_image_url</code> Datatype: String  Default: <code>\"\"</code>  URL for an optional Image which will be displayed in the 2FA App. <code>account_features.2fa.qr_endpoint</code> Datatype: Boolean  Default: <code>true</code>  Enable or disable QR Code Generation Endpoint for 2FA Login. This can be useful if you don't want to use any libraries on the client Side. <code>account_features.allow_add_fields_on_signup</code> Datatype: List  Default: <code>[]</code>  Allow those additional fields on signup. Leave empty if not sure. <code>account_features.allow_add_fields_patch_user</code> Datatype: List  Default: <code>[]</code>  Allow those additional fields to be set when modifying user. Leave empty if not sure. The entries here extend already set <code>account_features.allow_add_fields_on_signup</code> fields. <code>account_features.allow_deletion</code> Datatype: Boolean  Default: <code>true</code>  Allow the user to request an account deletion. <code>account_features.deletion_pending_minutes</code> Datatype: Integer  Default: <code>10080</code>  Minutes before the account gets deleted. Directly after requesting deletion, the User can't log in anymore, but the data will be persisted until this value passes by. Example Value is a Week. <code>account_features.profile_picture.allow</code> Datatype: Boolean  Default: <code>true</code>  Enable or disable profile picture uploads. <code>account_features.profile_picture.resize.width</code> Datatype: Integer  Default: <code>200</code>  Resizing Width for the Profile Picture. <code>account_features.profile_picture.resize.height</code> Datatype: Integer  Default: <code>200</code>  Resizing Height for the Profile Picture. <code>account_features.profile_picture.resize.quality</code> Datatype: Integer  Default: <code>80</code>  Optimizing Quality for the Profile Picture. <p>Profile Pictures</p> <p>All Profile Pictures get served under <code>/cdn/&lt;user_id&gt;.webp</code>. This is a public endpoint and can be used in your frontend to display the profile picture of a user. The User ID can be found in many endpoints like <code>/profile</code>. If a user doesn't have a profile picture, a default image will be served. (default.webp in the <code>uploads</code> directory specified in the docker-compose). You have to create the <code>default.webp</code> file yourself.</p> <p>Additional Fields</p> <p>The <code>allow_add_fields_on_signup</code> makes it possible to add custom fields to the signup process. If you don't set the fields that are allowed here on signup, you can't update them later, except you also have them in <code>allow_add_fields_patch_user</code>.</p>"},{"location":"configuration/configuration/#security-configuration","title":"Security Configuration","text":"<p>CORS Configuration</p> <p>Be careful when configuring CORS. Leaving the <code>security.allow_origins</code> at <code>*</code> can lead to security vulnerabilities. Make sure to also check if your <code>session.cookie*</code> settings work with your CORS settings. When setting <code>allow_origins</code> to <code>*</code>, the auto cookie functionality may not work Cross Site. Google Chrome will remove Cross Domain Cookies Support in the future so be careful when configuring this setting and always test it before deploying.</p> Parameter Description <code>security.allow_origins</code> Datatype: List  Default: <code>[\"*\"]</code>  CORS (Cross Origin Ressource Sharing) Policy. Enables access from different domains. Don't leave at <code>*</code> <code>security.allow_headers</code> Datatype: List  Default: <code>[\"*\"]</code>  Allowed HTTP Headers. Can be used to restrict certain users from accessing EZAuth. <code>security.max_login_attempts</code> Datatype: Integer  Default: <code>5</code>  Maximum amount of login attempts before the account gets locked. Set to <code>0</code> to disable. If a User performs a successfull login the counter gets deleted. If this doesn't happen (counter doesn't reach maximum but still has a value), the failed attempts will be expired after <code>security.expire_unfinished_timeout</code>. <code>security.login_timeout</code> Datatype: Integer  Default: <code>5</code>  Time in minutes until the account gets unlocked after the maximum login attempts. <code>security.expire_unfinished_timeout</code> Datatype: Integer  Default: <code>60</code>  Time in minutes until the failed login attempts get expired. (Without reaching the max_login_attempts)"},{"location":"configuration/email_templates/","title":"E-Mail Templates","text":"<p>EZAuth uses a set of default E-mail templates to send out e-mails to users. These templates are stored in the <code>config/email</code> folder. You can customize these templates as per your requirements.</p> <p>E-Mail Subject</p> <p>EZAuth will automatically use the HTML <code>&lt;title&gt;&lt;/title&gt;</code> tag to specify the subject of the e-mail.</p> <p>Default Placeholders</p> <p>Every E-Mail template which is directed at a registered user will be able to use any of the properties of the user in the database. This includes the <code>username</code>, <code>email</code>, <code>id</code>, and any other property you might have added to the user object.</p>"},{"location":"configuration/email_templates/#required-e-mail-templates","title":"Required E-Mail Templates","text":"<p>Required Templates</p> <p>Only edit those templates and don't delete them. If you delete them, the service will not work as expected.</p>"},{"location":"configuration/email_templates/#1-email-verification","title":"1. Email Verification","text":"<ul> <li>Can be enabled in the <code>config.json</code> file.</li> <li>File Name: <code>ConfirmEmail.html</code></li> </ul> <p>This can also be triggered, when a user changes their email address. So avoid wording like \"new account\" in the template.</p>"},{"location":"configuration/email_templates/#additional-placeholders","title":"Additional Placeholders","text":"<ul> <li><code>{{code}}</code>: The confirmation code to confirm the email address.</li> <li><code>{{time}}</code>: Time remaining before the confirmation code expires in minutes. (e.g. 5)</li> <li><code>{{username}}</code>: The username of the user wanting to verify their email address.</li> </ul>"},{"location":"configuration/email_templates/#2-welcome-email","title":"2. Welcome Email","text":"<ul> <li>Can be enabled in the <code>config.json</code> file.</li> <li>Will be sent out after the user has successfully verified their email address.</li> <li>File Name: <code>WelcomeMail.html</code></li> </ul>"},{"location":"configuration/email_templates/#3-password-reset","title":"3. Password Reset","text":"<ul> <li>Can be enabled in the <code>config.json</code> file.</li> <li>Will be sent out when a user requests a password reset.</li> <li>File Name: <code>ChangePassword.html</code></li> </ul>"},{"location":"configuration/email_templates/#additional-placeholders_1","title":"Additional Placeholders","text":"<ul> <li><code>{{code}}</code>: The confirmation code to confirm the password change.</li> <li><code>{{time}}</code>: Time remaining before the confirmation code expires in minutes. (e.g. 5). This will be the same as the <code>signup.conf_code_expiry</code> value in the <code>config.json</code> file.</li> </ul>"},{"location":"configuration/email_templates/#custom-e-mail-templates","title":"Custom E-Mail Templates","text":"<p>You can add custom e-mail templates to the <code>config/email</code> folder. Whenever you are able to specifiy a E-Mail Template, you can specify the template you want to use by providing the file name without the <code>.html</code> extension. Example: <code>WelcomeMail</code> will use the <code>WelcomeMail.html</code> template.</p> <p>Broadcast E-Mails</p> <p>By using the Internal API you can send out broadcast e-mails to all users. This can be useful for maintenance notifications or other important information. You can also provide a custom MongoDB Filter to only send the e-mail to a specific group of users. Example: <code>{\"sexual_preference\": \"gay\"}</code> -&gt; This will only send the e-mail to users who have <code>gay</code> as their <code>sexual_preference</code>.</p>"},{"location":"getting-started/setup/","title":"Setup / Installation","text":""},{"location":"getting-started/setup/#install-docker-and-docker-compose","title":"Install Docker and Docker Compose","text":"<p>To install and use EZAuth you need to have Docker and Docker Compose installed on your system. If you don't have Docker and Docker Compose installed you can follow the official installation guides for Docker and Docker Compose.</p> <p>Docker compose install</p> <p>EZAuth documentation assumes the use of Docker desktop (or the docker compose plugin). While the docker-compose standalone installation still works, it will require changing all <code>docker compose</code> commands from <code>docker compose</code> to <code>docker-compose</code> to work (e.g. <code>docker compose up -d</code> will become <code>docker-compose up -d</code>).</p> <p>Docker on windows</p> <p>If you just installed docker on a windows system, make sure to reboot your system, otherwise you might encounter unexplainable Problems related to network connectivity to docker containers.</p>"},{"location":"getting-started/setup/#ezauth-docker-setup","title":"EZAuth Docker Setup","text":"<p>To install EZAuth you need to clone the repository and perform an initial  configuration. You can do this by running the following commands:</p> <pre><code># Clone the repository\ngit clone https://github.com/JohnGrubba/ezauth\ncd ezauth\ncp config/configtemplate.json config/config.json\n</code></pre> <p>Then you need to edit the <code>config/config.json</code> file to your needs. For an explanation of the configuration options, see the Configuration page.</p>"},{"location":"getting-started/setup/#running-the-service","title":"Running the service","text":"<p>Configure the Service first</p> <p>Before you can run the service you need to configure it.</p> <p>After you have configured the service you can start it by running the following command:</p> <p><pre><code>docker compose up -d --build\n</code></pre> The service should now be running and you can access the API by navigating to <code>http://localhost:3250</code> in your browser. The API Documentation is available at <code>http://localhost:3250/docs</code>.</p>"}]}